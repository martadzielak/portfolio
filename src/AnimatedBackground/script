import React, { useEffect, useRef } from "react";
import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";

const vertexShader = `
vec3 mod289(vec3 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
    return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

vec3 fade(vec3 t) {
    return t*t*t*(t*(t*6.0-15.0)+10.0);
}

// Classic Perlin noise, periodic variant
float pnoise(vec3 P, vec3 rep)
{
    vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period
    vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period
    Pi0 = mod289(Pi0);
    Pi1 = mod289(Pi1);
    vec3 Pf0 = fract(P); // Fractional part for interpolation
    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
    vec4 iy = vec4(Pi0.yy, Pi1.yy);
    vec4 iz0 = Pi0.zzzz;
    vec4 iz1 = Pi1.zzzz;

    vec4 ixy = permute(permute(ix) + iy);
    vec4 ixy0 = permute(ixy + iz0);
    vec4 ixy1 = permute(ixy + iz1);

    vec4 gx0 = ixy0 * (1.0 / 5.0);
    vec4 gy0 = fract(floor(gx0) * (1.0 / 5.0)) - 0.5;
    gx0 = fract(gx0);
    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
    vec4 sz0 = step(gz0, vec4(0.0));
    gx0 -= sz0 * (step(0.0, gx0) - 0.5);
    gy0 -= sz0 * (step(0.0, gy0) - 0.5);

    vec4 gx1 = ixy1 * (1.0 / 5.0);
    vec4 gy1 = fract(floor(gx1) * (1.0 / 5.0)) - 0.5;
    gx1 = fract(gx1);
    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
    vec4 sz1 = step(gz1, vec4(0.0));
    gx1 -= sz1 * (step(0.0, gx1) - 0.5);
    gy1 -= sz1 * (step(0.0, gy1) - 0.5);

    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
    g000 *= norm0.x;
    g010 *= norm0.y;
    g100 *= norm0.z;
    g110 *= norm0.w;
    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
    g001 *= norm1.x;
    g011 *= norm1.y;
    g101 *= norm1.z;
    g111 *= norm1.w;

    float n000 = dot(g000, Pf0);
    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
    float n111 = dot(g111, Pf1);

    vec3 fade_xyz = fade(Pf0);
    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
    return 0.5 * n_xyz;
}

// Turbulence By Jaume Sanchez => https://codepen.io/spite/

varying vec2 vUv;
varying float noise;
varying float qnoise;
varying float displacement;

uniform float time;
uniform float displace;
uniform float decay;
uniform float size;
uniform float waves;
uniform float eqcolor;

float turbulence( vec3 p) {
    float t = - 0.0005;
    for (float f = 0.1 ; f <= 2.0 ; f++ ){
        float power = pow( f, 0.1 );
        t += tan( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );
    }
    return t;
}

void main() {

    vUv = uv;

    noise = tan(0.5 * waves) * turbulence( decay * abs(normal + time));
    qnoise = pow(0.5 *  - eqcolor, 1.0) * turbulence( decay * abs(normal + time));
    float b = pnoise( 0.5 * (position) + vec3( (decay * 1.0) * time ), vec3( 100.0 ) );

    displacement = - atan(noise) + cos(b * displace);

    vec3 newPosition = (position) + (normal * displacement);
    gl_Position = (projectionMatrix * modelViewMatrix) * vec4( newPosition, pow(0.5, size) );
    gl_PointSize = 0.5;
}
`;

const fragmentShader = `varying float qnoise;
varying float noise;

uniform float time;
uniform float rcolor;
uniform float gcolor;
uniform float bcolor;

void main() {
    float r, g, b;

    r = pow(abs(qnoise + rcolor), 4.0);
    g = pow(abs(qnoise + gcolor), 4.0);
    b = pow(abs(qnoise + bcolor), 4.0);

    gl_FragColor = vec4(r, g, b, 1.0);
}`;

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(35);
let renderer: THREE.WebGLRenderer;

export const AnimatedBackground = (props: any) => {

    const canvasRef = useRef(null);

    useEffect(() => {


        const canvas = canvasRef.current;
        if (canvas) {
            renderer = new THREE.WebGLRenderer({
                alpha: true,
                antialias: true,
                canvas: canvas || undefined,

            });

            scene.background = new THREE.Color(0x000000);
            scene.fog = new THREE.Fog(scene.background, 20, 40);

            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            renderer.outputEncoding = THREE.sRGBEncoding;

            const controls = new OrbitControls(camera, canvas);
            controls.target.set(0, 0, 0);
            controls.rotateSpeed = 1.0;
            controls.enableZoom = false;
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.update();

            camera.position.z = 20;

            const sGroup = new THREE.Group();

            scene.add(sGroup);

            const a = 0.4;	// Div follow mouse - speed

            let x_ = 0;
            let y_ = 0;
            const _x = 0;
            const _y = 0;
            let _xm_ = 0;
            let _ym_ = 0;
            let _x_ = 0;
            let _y_ = 0;

            let m_global;
            let p_mat;
            let p_geo: THREE.Geometry | undefined;
            let p_drp;
            let p_rain;
            const p_cnt = 150;

            const options = {
                perlin: {
                    speed: 0.4,
                    size: 0.25,
                    perlins: 1.0,
                    decay: 1.2,
                    displace: 0.2,
                    complex: 0.5,
                    waves: 2.7,
                    eqcolor: 15.0,
                    rcolor: 0.7,
                    gcolor: 0.2,
                    bcolor: 0.0,
                    fragment: true,
                    points: false,
                },
                text: false,
                rain: {
                    r: false,
                    c: false,
                },
            };

            const createElements = () => {
                const c_geo = new THREE.IcosahedronBufferGeometry(1, 6);
                const w_geo = new THREE.IcosahedronBufferGeometry(1.1, 2);
                m_global = new THREE.ShaderMaterial({
                    uniforms: {
                        time: {
                            value: 0.1,
                        },
                        decay: {
                            value: 0.3,
                        },
                        size: {
                            value: 0.3,
                        },
                        displace: {
                            value: 4.1,
                        },
                        waves: {
                            value: 0.1,
                        },
                        eqcolor: {
                            value: 0.0,
                        },
                        rcolor: {
                            value: 0.0,
                        },
                        gcolor: {
                            value: 0.0,
                        },
                        bcolor: {
                            value: 0.0,
                        },
                    },
                    vertexShader,
                    fragmentShader,
                });
                const c_mes = new THREE.Mesh(c_geo, m_global);
                const w_mes = new THREE.Points(w_geo, m_global);
                sGroup.add(c_mes);
                sGroup.add(w_mes);
            };
            const createLights = () => {
                const a_light = new THREE.AmbientLight(0xffffff, 0.5);
                const p_light = new THREE.PointLight(0xffffff, 0.5);
                p_light.position.set(5, 5, -5);

                scene.add(p_light);
                scene.add(a_light);
            };

            const createParticles = (value: boolean) => {
                const p_amp = 20;
                p_geo = new THREE.Geometry();
                for (let i = 0; i < p_cnt; i++) {
                    p_drp = new THREE.Vector3(
                        Math.random() * p_amp - (p_amp / 2),
                        Math.random() * (p_amp * 2) - (p_amp),
                        Math.random() * p_amp - (p_amp / 2),
                    );
                    p_drp.y = 0;
                    p_drp.x = Math.random() * 0.001;
                    p_drp.z = Math.random() * 0.001;
                    p_geo.vertices.push(p_drp);

                }

                p_mat = new THREE.PointsMaterial({
                    transparent: true,
                    size: 0.1,
                    color: 0xffffff,
                });

                p_rain = new THREE.Points(p_geo, p_mat);
                p_rain.visible = value;
                scene.add(p_rain);
            };

            const animation = () => {
                requestAnimationFrame(animation);
                if (p_geo) {
                    p_geo.vertices.forEach((p: { y: number; x: number; z: number }) => {
                        let velocity = 0.0001 + Math.random() * 0.0005;
                        p.y += velocity;
                        if (options.rain.c) {
                            p.x = Math.sin(Date.now()) * 15;
                            p.z = Math.cos(Date.now()) * 15;
                        }
                        if (p.y <= -20) {
                            p.y = 20;
                            velocity = 0;
                        }
                    });

                    p_geo.verticesNeedUpdate = true;

                    x_ += (_x - x_) * a / 2;
                    y_ += (_y - y_) * a / 2;
                    _x_ += (_x - _x_) * a;
                    _y_ += (_y - _y_) * a;
                    _xm_ += (_x - _xm_) * a / 1.5;
                    _ym_ += (_y - _ym_) * a / 1.5;

                    camera.lookAt(scene.position);
                    camera.updateMatrixWorld();
                    renderer.render(scene, camera);
                }

                const onWindowResize = () => {
                    const w = window.innerWidth;
                    const h = window.innerHeight;
                    camera.aspect = w / h;
                    camera.updateProjectionMatrix();
                    renderer.setSize(w, h);
                };

                createElements();
                createLights();
                createParticles(false);
                animation();
                onWindowResize();
            };
        }
    }, [draw]);

    const draw = 

    return <canvas ref={canvasRef} {...props} />;
};
